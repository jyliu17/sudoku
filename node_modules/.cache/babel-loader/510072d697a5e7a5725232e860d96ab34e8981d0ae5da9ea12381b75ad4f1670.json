{"ast":null,"code":"var _jsxFileName = \"/Users/jyliu/Development/Wallbox/sudoku/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  _s();\n  let {\n    solveSudoku\n  } = _ref;\n  const [boardState, setBoardState] = useState([[0, 0, 0, 2, 6, 0, 7, 0, 1], [6, 8, 0, 0, 7, 0, 0, 9, 0], [1, 9, 0, 0, 0, 4, 5, 0, 0], [8, 2, 0, 1, 0, 0, 0, 4, 0], [0, 0, 4, 6, 0, 2, 9, 0, 0], [0, 5, 0, 0, 0, 3, 0, 2, 8], [0, 0, 9, 3, 0, 0, 0, 7, 4], [0, 4, 0, 0, 5, 0, 0, 3, 6], [7, 0, 3, 0, 1, 8, 0, 0, 0]]);\n  const isRowValid = (board, row, value) => {\n    console.log(value);\n    for (let i = 0; i < 9; i++) {\n      if (board[row - 1][i] === value) {\n        alert(\"contains duplicate number\");\n      }\n    }\n    return board;\n  };\n\n  // Check if a column is valid\n  const isColumnValid = (board, column, value) => {\n    for (let i = 0; i < 9; i++) {\n      if (board[i][column - 1] === value) {\n        alert(\"contains duplicate number\");\n        return false;\n      }\n    }\n    return board;\n  };\n\n  // Check if a sub-box is valid\n  const isSubBoxValid = (board, row, column, value) => {\n    let startRow = row - row % 3;\n    let startCol = column - column % 3;\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i + startRow][j + startCol] === value) {\n          alert(\"contains duplicate number\");\n          return false;\n        }\n      }\n    }\n    return board;\n  };\n\n  // Check if the user input adheres to the rules of Sudoku\n  const isInputValid = (board, row, column, value) => {\n    return isRowValid(board, row, value) && isColumnValid(board, column, value) && isSubBoxValid(board, row, column, value);\n  };\n  const handleChange = (event, rowIndex, columnIndex) => {\n    const newValue = parseInt(event.target.value);\n    const newBoardState = [...boardState];\n    newBoardState[rowIndex][columnIndex] = newValue;\n    setBoardState(newBoardState);\n    isInputValid(newBoardState, rowIndex, columnIndex, newValue);\n    let solution = solveSudoku(boardState, 0, 0);\n    console.log(solution);\n    // if (newBoardState === solution) {\n    //   alert(\"Puzzle Solved!\")\n    // }\n  };\n\n  // const solve = () => {\n  //   console.log(boardState)\n  //   solveSudoku(boardState, 0, 0)\n  // }\n\n  const reset = () => {\n    const restart = [[0, 0, 0, 2, 6, 0, 7, 0, 1], [6, 8, 0, 0, 7, 0, 0, 9, 0], [1, 9, 0, 0, 0, 4, 5, 0, 0], [8, 2, 0, 1, 0, 0, 0, 4, 0], [0, 0, 4, 6, 0, 2, 9, 0, 0], [0, 5, 0, 0, 0, 3, 0, 2, 8], [0, 0, 9, 3, 0, 0, 0, 7, 4], [0, 4, 0, 0, 5, 0, 0, 3, 6], [7, 0, 3, 0, 1, 8, 0, 0, 0]];\n    setBoardState(restart);\n  };\n  // Render the board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [boardState.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: row.map((cell, columnIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: cell,\n        readOnly: cell !== 0,\n        onChange: e => handleChange(e, rowIndex, columnIndex)\n      }, `${rowIndex}-${columnIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isInputValid,\n      children: \"Check\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: reset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"YwA9mCFyMFPg4lKCRasObJAc1lY=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","solveSudoku","boardState","setBoardState","isRowValid","board","row","value","console","log","i","alert","isColumnValid","column","isSubBoxValid","startRow","startCol","j","isInputValid","handleChange","event","rowIndex","columnIndex","newValue","parseInt","target","newBoardState","solution","reset","restart","className","children","map","cell","readOnly","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jyliu/Development/Wallbox/sudoku/src/components/Board.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Cell from './Cell';\n\nconst Board = ({ solveSudoku}) => {\n\n  const [boardState, setBoardState] = useState([\n    [0, 0, 0, 2, 6, 0, 7, 0, 1],\n    [6, 8, 0, 0, 7, 0, 0, 9, 0],\n    [1, 9, 0, 0, 0, 4, 5, 0, 0],\n    [8, 2, 0, 1, 0, 0, 0, 4, 0],\n    [0, 0, 4, 6, 0, 2, 9, 0, 0],\n    [0, 5, 0, 0, 0, 3, 0, 2, 8],\n    [0, 0, 9, 3, 0, 0, 0, 7, 4],\n    [0, 4, 0, 0, 5, 0, 0, 3, 6],\n    [7, 0, 3, 0, 1, 8, 0, 0, 0]\n  ]);\n  const isRowValid = (board, row, value) => {\n    console.log(value)\n    for (let i = 0; i < 9; i++) {\n        if (board[row - 1][i] === value) {\n            alert(\"contains duplicate number\")\n            \n        }\n    }\n    return board;\n};\n\n// Check if a column is valid\nconst isColumnValid = (board, column, value) => {\n    for (let i = 0; i < 9; i++) {\n        if (board[i][column - 1] === value) {\n            alert(\"contains duplicate number\")\n            return false;\n        }\n    }\n    return board;\n};\n\n// Check if a sub-box is valid\nconst isSubBoxValid = (board, row, column, value) => {\n    let startRow = row - (row % 3);\n    let startCol = column - (column % 3);\n\n    for (let i = 0; i <  3; i++) {\n        for (let j = 0; j < 3; j++) {\n            if (board[i + startRow][j + startCol] === value) {\n                alert(\"contains duplicate number\")\n                return false;\n            }\n        }\n    }\n    return board;\n};\n\n// Check if the user input adheres to the rules of Sudoku\nconst isInputValid = (board, row, column, value) => {\n    return isRowValid(board, row, value) && \n           isColumnValid(board, column, value) && \n           isSubBoxValid(board, row, column, value);\n};\n  \n  const handleChange = (event, rowIndex, columnIndex) => {\n      const newValue = parseInt(event.target.value);\n      const newBoardState = [...boardState];\n      newBoardState[rowIndex][columnIndex] = newValue;\n      setBoardState(newBoardState);\n      isInputValid(newBoardState,rowIndex, columnIndex, newValue)\n      \n      let solution = solveSudoku(boardState, 0, 0)\n      console.log(solution)\n      // if (newBoardState === solution) {\n      //   alert(\"Puzzle Solved!\")\n      // }\n  }\n\n  // const solve = () => {\n  //   console.log(boardState)\n  //   solveSudoku(boardState, 0, 0)\n  // }\n\n  const reset = () => {\n    const restart = [\n      [0, 0, 0, 2, 6, 0, 7, 0, 1],\n      [6, 8, 0, 0, 7, 0, 0, 9, 0],\n      [1, 9, 0, 0, 0, 4, 5, 0, 0],\n      [8, 2, 0, 1, 0, 0, 0, 4, 0],\n      [0, 0, 4, 6, 0, 2, 9, 0, 0],\n      [0, 5, 0, 0, 0, 3, 0, 2, 8],\n      [0, 0, 9, 3, 0, 0, 0, 7, 4],\n      [0, 4, 0, 0, 5, 0, 0, 3, 6],\n      [7, 0, 3, 0, 1, 8, 0, 0, 0]\n    ]\n    setBoardState(restart)\n  }\n  // Render the board\n  return (\n    <div className=\"board\">\n      {boardState.map((row, rowIndex) => (\n        <div className=\"board-row\" key={rowIndex}>\n          {row.map((cell, columnIndex) => (\n            <Cell\n              key={`${rowIndex}-${columnIndex}`}\n              value={cell}\n              readOnly={cell !== 0}\n              onChange={(e) => handleChange(e, rowIndex, columnIndex)}\n            />\n          ))}\n        </div>\n        \n      ))}\n      {/* <button onClick={solve}>\n                Solve\n      </button> */}\n      \n      <button onClick={isInputValid}>\n                Check\n      </button>\n      \n      <button onClick={reset}>\n                Reset\n      </button>\n    </div>\n  );\n};\n\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}